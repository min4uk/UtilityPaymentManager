@model IEnumerable<UtilityPaymentManager.Models.Counter>

@{
	ViewData["Title"] = "Payment index";
}

<h1>Index</h1>

<p>
	<a asp-action="Create">Create New counter</a>
</p>
<table class="table">
	<thead>
		<tr>
			<th>
				@Html.DisplayNameFor(model => model.Name)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.CurrentNumber)
			</th>
			<th>
				New number
			</th>
			<th>
				Change amount
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Price)
			</th>
			<th>
				Sum
			</th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		<form asp-action="Pay">
			<div asp-validation-summary="ModelOnly" class="text-danger"></div>
			@foreach (var item in Model)
			{
			<tr>
				<td>
					<input type="hidden" value="@item.Name" />
						@Html.DisplayFor(modelItem => item.Name)
				</td>
				<td>
					<input type="hidden" value="@item.CurrentNumber" />
						@Html.DisplayFor(modelItem => item.CurrentNumber)
				</td>
				<td>
					@*<label asp-for="NewNumber" class="control-label"></label>
					<input asp-for="NewNumber" id="newNumInput" class="form-control" />
				<span asp-validation-for="NewNumber" class="text-danger"></span>*@
				</td>
				<td>
					@*<input type="hidden" value="@(item.CurrentNumber - NewNumber)" />
						@(item.CurrentNumber - newNumber) = changeAmount*@
				</td>
				<td>
						@Html.DisplayFor(modelItem => item.Price)
				</td>
				<td>
					@*<input type="hidden" value="@(ChangeAmount * item.Price)" />
						@(changeAmount * item.Price) = Sum*@
				</td>
				<td>
					<input type="submit" value="Pay" class="btn btn-primary" />
				</td>
			</tr>
			}
		</form>
	</tbody>
</table>


@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
}

@{
	await Html.RenderPartialAsync("PaidCounterPartialDetail", ViewData["PaidCounters"]); // передати сюди модель?
}
